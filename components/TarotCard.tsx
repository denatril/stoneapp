import React, { memo, useCallback, useMemo, useEffect } from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
  Dimensions,
} from 'react-native';
import { TarotCard as TarotCardType } from '../data/tarotCards';
import { UI_CONSTANTS } from '../constants';
import SafeImage from './SafeImage';

// Tarot kart arkasƒ± i√ßin statik g√∂rsel haritasƒ±
const tarotImageMap: { [key: string]: any } = {
  'card-back.svg': require('../assets/tarot/card-back.svg'),
  'card.png': require('../assets/tarot/card.png'),
};

// Kart g√∂r√ºnt√ºleri i√ßin URL olu≈üturma
const TAROT_BASE_URL = 'https://raw.githubusercontent.com/rws-tarot/rws-tarot-card-images/master/cards-jpg/';

// Major Arcana kart g√∂r√ºnt√ºleri i√ßin dosya adlarƒ±
const majorArcanaFileNames: { [key: string]: string } = {
  '0': 'fool',
  '1': 'magician',
  '2': 'high-priestess',
  '3': 'empress',
  '4': 'emperor',
  '5': 'hierophant',
  '6': 'lovers',
  '7': 'chariot',
  '8': 'strength',
  '9': 'hermit',
  '10': 'wheel-of-fortune',
  '11': 'justice',
  '12': 'hanged-man',
  '13': 'death',
  '14': 'temperance',
  '15': 'devil',
  '16': 'tower',
  '17': 'star',
  '18': 'moon',
  '19': 'sun',
  '20': 'judgement',
  '21': 'world',
};



// Performans i√ßin statik g√∂rsel haritasƒ± - bir kez y√ºklenir
const cardImages: { [key: string]: any } = {
  '0': require('../assets/major-arcana/00-fool.png'),
  '1': require('../assets/major-arcana/01-magician.png'),
  '2': require('../assets/major-arcana/02-high-priestess.png'),
  '3': require('../assets/major-arcana/03-empress.png'),
  '4': require('../assets/major-arcana/04-emperor.png'),
  '5': require('../assets/major-arcana/05-hierophant.png'),
  '6': require('../assets/major-arcana/06-lovers.png'),
  '7': require('../assets/major-arcana/07-chariot.png'),
  '8': require('../assets/major-arcana/08-strength.png'),
  '9': require('../assets/major-arcana/09-hermit.png'),
  '10': require('../assets/major-arcana/10-wheel-of-fortune.png'),
  '11': require('../assets/major-arcana/11-justice.png'),
  '12': require('../assets/major-arcana/12-hanged-man.png'),
  '13': require('../assets/major-arcana/13-death.png'),
  '14': require('../assets/major-arcana/14-temperance.png'),
  '15': require('../assets/major-arcana/15-devil.png'),
  '16': require('../assets/major-arcana/16-tower.png'),
  '17': require('../assets/major-arcana/17-star.png'),
  '18': require('../assets/major-arcana/18-moon.png'),
  '19': require('../assets/major-arcana/19-sun.png'),
  '20': require('../assets/major-arcana/20-judgement.png'),
  '21': require('../assets/major-arcana/21-world.png'),
};

// Fallback g√∂rsel
const fallbackImage = require('../assets/icon.png');

// Optimize edilmi≈ü g√∂rsel y√ºkleme fonksiyonu
const getCardImage = (cardNumber: string): any => {
  try {
    return cardImages[cardNumber] || fallbackImage;
  } catch (error) {
     console.error('G√∂r√ºnt√º y√ºkleme hatasƒ±:', error);
     return fallbackImage;
   }
 };

// Kart ismini b√ºy√ºk yazƒ± ile g√∂stermek i√ßin yardƒ±mcƒ± bile≈üen
const CardNameOverlay = ({ cardName }: { cardName: string }) => (
  <View style={styles.cardNumberOverlay}>
    <Text style={styles.cardNumberText}>{cardName}</Text>
  </View>
);

const { width } = Dimensions.get('window');
const CARD_WIDTH = (width - UI_CONSTANTS.SPACING.MD * 4) / 2.5; // Kartlarƒ± b√ºy√ºtmek i√ßin 3'ten 2.5'e deƒüi≈ütirildi
const CARD_HEIGHT = CARD_WIDTH * 1.6; // Tarot kartƒ± oranƒ±

interface TarotCardProps {
  card?: TarotCardType;
  isFlipped?: boolean;
  isSelected?: boolean;
  onPress?: (card: TarotCardType) => void;
  showBack?: boolean;
  disabled?: boolean;
}

const TarotCard = memo<TarotCardProps>((
  {
    card,
    isFlipped = false,
    isSelected = false,
    onPress,
    showBack = false, // Varsayƒ±lan olarak √∂n y√ºz√º g√∂ster
    disabled = false,
  }
) => {
  // G√∂rsel √∂nbelleƒüe alma
  useEffect(() => {
    // React Native'de require() ile y√ºklenen g√∂rseller zaten cache'leniyor
    // Manuel preload gerekmiyor
  }, [card]);

  // Animasyon olmadan direkt kart g√∂sterme
  const handlePress = useCallback(() => {
    if (disabled || !card) return;
    onPress?.(card);
  }, [disabled, card, onPress]);



  // Kart √∂n y√ºz√º (a√ßƒ±k kart) - PNG g√∂sterim alanƒ±
  const renderCardFront = () => {
    if (!card) return null;

    return (
      <View style={[styles.cardFace, styles.cardFront]}>
        {/* PNG g√∂r√ºnt√º alanƒ± - Header kaldƒ±rƒ±ldƒ± */}
        <View style={styles.pngContainer}>
          <SafeImage 
            source={getCardImage(card.number.toString())}
            style={styles.pngImage}
            resizeMode="contain"
            showLoader={true}
            onError={(error) => {
              console.log('Android g√∂r√ºnt√º y√ºkleme hatasƒ±:', error.nativeEvent.error);
            }}
          />
        </View>
      </View>
    );
  };



  // Sembol ikonlarƒ±
  const getSymbolIcon = (symbol: string): string => {
    const symbolMap: { [key: string]: string } = {
      'U√ßurum': 'üèîÔ∏è',
      'Beyaz g√ºl': 'üåπ',
      'K√∂pek': 'üêï',
      'Daƒülar': '‚õ∞Ô∏è',
      'G√ºne≈ü': '‚òÄÔ∏è',
      'Sonsuzluk i≈üareti': '‚àû',
      'Deƒünek': 'ü™Ñ',
      'Kupa': 'üèÜ',
      'Kƒ±lƒ±√ß': '‚öîÔ∏è',
      'Pentagram': '‚≠ê',
      'Ay': 'üåô',
      'Pomegranate': 'üçé',
      'Ha√ß': '‚úùÔ∏è',
      'Tora': 'üìú',
      'Su': 'üíß',
      'Buƒüday': 'üåæ',
      'Ven√ºs i≈üareti': '‚ôÄ',
      'Ta√ß': 'üëë',
      'Nehir': 'üåä',
      'Yastƒ±k': 'üõèÔ∏è',
      'Taht': 'ü™ë',
      'Ko√ß kafasƒ±': 'üêè',
      'Orb': 'üîÆ',
      'Zƒ±rh': 'üõ°Ô∏è',
      'Anahtar': 'üóùÔ∏è',
      'S√ºtunlar': 'üèõÔ∏è',
      '√ái√ßekler': 'üå∏',
      'Melek': 'üëº',
      'Adem ve Havva': 'üë´',
      'Aƒüa√ß': 'üå≥',
      'Daƒü': 'üèîÔ∏è',
      'Sava≈ü arabasƒ±': 'üè∫',
      'Sfenks': 'ü¶Å',
      'Yƒ±ldƒ±zlar': '‚≠ê',
      '≈ûehir': 'üèôÔ∏è',
      'Kadƒ±n': 'üë©',
      'Aslan': 'ü¶Å',
      'Fener': 'üèÆ',
      'Yƒ±ldƒ±z': '‚≠ê',
      'Gri sakal': 'üßô',
      '√áark': '‚ò∏Ô∏è',
      'Yƒ±lan': 'üêç',
      'Anubis': 'üê∫',
      'Bulutlar': '‚òÅÔ∏è',
      'Terazi': '‚öñÔ∏è',
      'Perde': 'üé≠',
      'Asƒ±lƒ± fig√ºr': 'ü§∏',
      'Hale': 'üòá',
      'Kƒ±rmƒ±zƒ± pantolon': 'üëñ',
      'ƒ∞skelet': 'üíÄ',
      'Bayrak': 'üè≥Ô∏è',
      'Kupalar': 'üèÜ',
      'Yol': 'üõ§Ô∏è',
      '≈ûeytan fig√ºr√º': 'üòà',
      'Zincirler': '‚õìÔ∏è',
      'Boynuzlar': 'üëπ',
      'Ters pentagram': 'üîØ',
      'Alev': 'üî•',
      'Kule': 'üóº',
      '≈ûim≈üek': '‚ö°',
      'ƒ∞nsanlar': 'üë•',
      'K√∂pekler': 'üêï',
      'Kerevit': 'ü¶Ä',
      'Kuleler': 'üè∞',
      '√áocuk': 'üë∂',
      'At': 'üêé',
      'Ay√ßi√ßekleri': 'üåª',
      'Trompet': 'üé∫',
      'Mezarlar': '‚ö∞Ô∏è',
      '√áelenk': 'üåø',
      'Kadƒ±n fig√ºr√º': 'üë©',
      'D√∂rt element': 'üåç',
      'Sonsuzluk': '‚àû',
      'D√ºnya': 'üåç'
    };
    return symbolMap[symbol] || '‚ú¶';
  };

  const cardContainerStyle = useMemo(() => [
    styles.cardContainer,
    isSelected && styles.selectedCard,
    disabled && styles.disabledCard,
  ], [isSelected, disabled]);

  return (
    <TouchableOpacity
      style={cardContainerStyle}
      onPress={handlePress}
      activeOpacity={0.8}
      disabled={disabled}
    >
      <View style={styles.card}>
        {renderCardFront()}
      </View>
      
      {isSelected && (
        <View style={styles.selectionIndicator}>
          <Text style={styles.selectionText}>Se√ßildi</Text>
        </View>
      )}
    </TouchableOpacity>
  );
});

const styles = StyleSheet.create({
  cardContainer: {
    margin: UI_CONSTANTS.SPACING.XS,
    alignItems: 'center',
  },
  selectedCard: {
    transform: [{ scale: 1.05 }],
  },
  disabledCard: {
    opacity: 0.6,
  },
  card: {
    width: CARD_WIDTH,
    height: CARD_HEIGHT,
  },
  cardFace: {
    position: 'absolute',
    width: '100%',
    height: '100%',
    backfaceVisibility: 'hidden',
  },

  cardFront: {
  },

  pngContainer: {
    flex: 1,
    width: '100%',
    height: '100%',
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'transparent',
    marginTop: -10,
    marginBottom: 5,
  },
  pngImage: {
    width: '100%',
    height: '100%',
    // G√∂rsel optimizasyonu i√ßin
    resizeMode: 'contain',
    backgroundColor: 'transparent',
    alignSelf: 'center',
    transform: [{ scale: 1.2 }],
  },

  selectionIndicator: {
    position: 'absolute',
    bottom: -8,
    backgroundColor: '#4CAF50',
    paddingHorizontal: 8,
    paddingVertical: 2,
    borderRadius: 10,
  },
  selectionText: {
    fontSize: 12,
    color: 'white',
    fontWeight: 'bold',
  },
  cardNumberOverlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    justifyContent: 'center',
    alignItems: 'center',
    zIndex: 10,
    backgroundColor: 'rgba(0,0,0,0.3)',
    borderRadius: 12,
  },
  cardNumberText: {
    fontSize: 72,
    fontWeight: 'bold',
    color: '#fff',
    textShadowColor: 'rgba(0,0,0,0.8)',
    textShadowOffset: { width: 2, height: 2 },
    textShadowRadius: 4,
  },
});

export default TarotCard;